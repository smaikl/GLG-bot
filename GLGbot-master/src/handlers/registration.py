from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.utils.states import RegistrationStates
from src.utils.helpers import is_valid_phone, is_valid_email
from src.database.models import User
from src.database.crud import add_user, get_user
from src.keyboards.registration_kb import get_role_keyboard, get_skip_keyboard, get_phone_keyboard
from src.keyboards.main_kb import get_main_keyboard, get_confirmation_keyboard

router = Router()

@router.message(F.text == "üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def registration_start(message: Message, state: FSMContext):
    await state.clear()

    user_id = message.from_user.id
    existing_user = await get_user(user_id)

    if existing_user:
        await message.answer(
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {existing_user.role}.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.",
            reply_markup=get_main_keyboard(existing_user.role)
        )
        return

    await message.answer(
        "üë§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=get_role_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_role)


@router.message(RegistrationStates.waiting_for_role)
async def process_role(message: Message, state: FSMContext):
    role_text = message.text

    if role_text == "üì¶ –Ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å":
        role = "sender"
    elif role_text == "üöö –Ø –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫":
        role = "carrier"
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=get_role_keyboard()
        )
        return

    await state.update_data(role=role)

    await message.answer(
        "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        full_name = message.from_user.first_name
        if message.from_user.last_name:
            full_name += f" {message.from_user.last_name}"
    else:
        full_name = message.text

    await state.update_data(full_name=full_name)

    await message.answer(
        "üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXXX.",
        reply_markup=get_phone_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_phone)


@router.message(RegistrationStates.waiting_for_phone, F.contact)
async def process_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number

    await state.update_data(phone=phone)
    await ask_for_email(message, state)


@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text.strip()

    if not is_valid_phone(phone):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.",
            reply_markup=get_phone_keyboard()
        )
        return

    await state.update_data(phone=phone)
    await ask_for_email(message, state)


async def ask_for_email(message: Message, state: FSMContext):
    await message.answer(
        "üìß –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_email)


@router.message(RegistrationStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        email = None
    else:
        email = message.text.strip()
        if not is_valid_email(email):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
                reply_markup=get_skip_keyboard()
            )
            return

    await state.update_data(email=email)

    await message.answer(
        "üè¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_company)


@router.message(RegistrationStates.waiting_for_company)
async def process_company(message: Message, state: FSMContext):
    company = None if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text.strip()
    await state.update_data(company=company)

    user_data = await state.get_data()

    role_text = "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å" if user_data["role"] == "sender" else "–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫"
    email_text = user_data.get("email") or "–ù–µ —É–∫–∞–∑–∞–Ω"
    company_text = user_data.get("company") or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    await message.answer(
        f"üë§ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"–†–æ–ª—å: {role_text}\n"
        f"–§–ò–û: {user_data['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"Email: {email_text}\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {company_text}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_confirmation_keyboard()
    )
    await state.set_state(RegistrationStates.confirmation)


@router.callback_query(RegistrationStates.confirmation, F.data == "confirm")
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    user = User(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        full_name=user_data["full_name"],
        phone=user_data["phone"],
        email=user_data.get("email"),
        company=user_data.get("company"),
        role=user_data["role"]
    )

    await add_user(user)

    role_text = "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è" if user.role == "sender" else "–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞"

    await callback.message.answer(
        f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role_text}.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
        reply_markup=get_main_keyboard(user.role)
    )

    await callback.answer()
    await state.clear()


@router.callback_query(RegistrationStates.confirmation, F.data == "cancel")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ —Ä–æ–ª—å:",
        reply_markup=get_role_keyboard()
    )
    await callback.answer()
    await state.set_state(RegistrationStates.waiting_for_role)
