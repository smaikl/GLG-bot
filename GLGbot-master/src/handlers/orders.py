from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
import os

from src.utils.states import OrderCreationStates, OrderSearchStates
from src.utils.helpers import (
    format_order_info, 
    is_valid_weight, 
    get_status_emoji,
    save_document
)
from src.database.models import User, Order, Document
from src.database.crud import (
    get_user, 
    add_order, 
    add_document, 
    get_order, 
    update_order,
    get_available_orders,
    get_user_orders,
    get_order_documents
)
from src.keyboards.orders_kb import (
    get_create_order_keyboard, 
    get_cargo_type_keyboard, 
    get_cancel_keyboard,
    get_confirm_order_keyboard,
    get_document_keyboard,
    get_skip_keyboard,
    get_accept_order_keyboard,
    get_order_details_keyboard,
    get_orders_navigation_keyboard
)
from src.keyboards.main_kb import (
    get_main_keyboard, 
    get_confirmation_keyboard,
    get_cancel_keyboard
)
from src.config import config, logger


router = Router()
ORDERS_PER_PAGE = 5


@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def create_order_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user:
        await message.answer(
            "‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if user.role != "sender":
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏ –≥—Ä—É–∑–æ–≤.",
            reply_markup=get_main_keyboard(user.role)
        )
        return
    
    await message.answer(
        "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞:",
        reply_markup=get_cargo_type_keyboard()
    )
    
    await state.set_state(OrderCreationStates.waiting_for_cargo_type)


@router.message(OrderCreationStates.waiting_for_cargo_type)
async def process_cargo_type(message: Message, state: FSMContext):
    cargo_type = message.text
    
    valid_types = ["üì¶ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", "üìè –ù–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π", "üî∂ –•—Ä—É–ø–∫–∏–π", "üîí –¶–µ–Ω–Ω—ã–π"]
    
    if cargo_type not in valid_types:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_cargo_type_keyboard()
        )
        return
    
    cargo_type = cargo_type.split(" ")[1]
    await state.update_data(cargo_type=cargo_type)
    
    await message.answer(
        "‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.5):",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(OrderCreationStates.waiting_for_weight)


@router.message(OrderCreationStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    weight_str = message.text
    
    if not is_valid_weight(weight_str):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    weight = float(weight_str.replace(",", "."))
    await state.update_data(weight=weight)
    
    await message.answer(
        "üìè –£–∫–∞–∂–∏—Ç–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –îx–®x–í –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100x50x30).\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –≥–∞–±–∞—Ä–∏—Ç—ã.",
        reply_markup=get_skip_keyboard()
    )
    
    await state.set_state(OrderCreationStates.waiting_for_dimensions)


@router.message(OrderCreationStates.waiting_for_dimensions)
async def process_dimensions(message: Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        dimensions = None
    else:
        dimensions = message.text
    
    await state.update_data(dimensions=dimensions)
    
    await message.answer(
        "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(OrderCreationStates.waiting_for_pickup_address)


@router.message(OrderCreationStates.waiting_for_pickup_address)
async def process_pickup_address(message: Message, state: FSMContext):
    pickup_address = message.text
    
    await state.update_data(pickup_address=pickup_address)
    
    await message.answer(
        "üèÅ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(OrderCreationStates.waiting_for_delivery_address)


@router.message(OrderCreationStates.waiting_for_delivery_address)
async def process_delivery_address(message: Message, state: FSMContext):
    delivery_address = message.text
    
    await state.update_data(delivery_address=delivery_address)
    
    await message.answer(
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(OrderCreationStates.waiting_for_pickup_date)


@router.message(OrderCreationStates.waiting_for_pickup_date)
async def process_pickup_date(message: Message, state: FSMContext):
    pickup_date = message.text
    
    await state.update_data(pickup_date=pickup_date)
    
    await message.answer(
        "üí¨ –£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–µ—Ä–µ–≤–æ–∑–∫–µ.\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç.",
        reply_markup=get_skip_keyboard()
    )
    
    await state.set_state(OrderCreationStates.waiting_for_comment)


@router.message(OrderCreationStates.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        comment = None
    else:
        comment = message.text
    
    await state.update_data(comment=comment)
    
    user_data = await state.get_data()
    dimensions_text = f"–ì–∞–±–∞—Ä–∏—Ç—ã: {user_data.get('dimensions')}\n" if user_data.get('dimensions') else ""
    comment_text = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data.get('comment')}\n" if user_data.get('comment') else ""
    
    await message.answer(
        f"üì¶ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
        f"–¢–∏–ø –≥—Ä—É–∑–∞: {user_data['cargo_type']}\n"
        f"–í–µ—Å: {user_data['weight']} –∫–≥\n"
        f"{dimensions_text}"
        f"–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: {user_data['pickup_address']}\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_address']}\n"
        f"–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {user_data['pickup_date']}\n"
        f"{comment_text}\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=get_confirmation_keyboard()
    )
    
    await state.set_state(OrderCreationStates.confirmation)


@router.callback_query(OrderCreationStates.confirmation, F.data == "confirm")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    order = Order(
        sender_id=callback.from_user.id,
        cargo_type=user_data["cargo_type"],
        weight=user_data["weight"],
        dimensions=user_data.get("dimensions"),
        pickup_address=user_data["pickup_address"],
        delivery_address=user_data["delivery_address"],
        pickup_date=user_data["pickup_date"],
        comment=user_data.get("comment")
    )
    
    order_id = await add_order(order)
    
    await callback.message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫ –∑–∞—è–≤–∫–µ (—Ñ–æ—Ç–æ –≥—Ä—É–∑–∞, –¢–¢–ù –∏ —Ç.–¥.) "
        f"–∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.",
        reply_markup=get_document_keyboard()
    )
    
    await state.update_data(order_id=order_id)
    await state.set_state(OrderCreationStates.waiting_for_documents)
    
    await callback.answer()


@router.callback_query(OrderCreationStates.confirmation, F.data == "cancel")
async def cancel_order_confirmation(callback: CallbackQuery, state: FSMContext):
    user = await get_user(callback.from_user.id)
    
    await callback.message.answer(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard(user.role)
    )
    
    await callback.answer()
    await state.clear()


@router.message(OrderCreationStates.waiting_for_documents, F.text == "üìé –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def add_document_prompt(message: Message):
    await message.answer(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –∑–∞—è–≤–∫–µ.",
        reply_markup=get_document_keyboard()
    )


@router.message(OrderCreationStates.waiting_for_documents, F.photo | F.document)
async def process_document(message: Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    order_id = user_data["order_id"]
    
    if not os.path.exists(config.files_dir):
        os.makedirs(config.files_dir, exist_ok=True)
    
    if message.photo:
        file_id = message.photo[-1].file_id
        file_name = f"photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        file_type = "photo"
    else:
        file_id = message.document.file_id
        file_name = message.document.file_name
        file_type = "document"
    
    file_path = await save_document(bot, file_id, order_id, file_name)
    
    document = Document(
        order_id=order_id,
        file_path=file_path,
        file_name=file_name,
        file_type=file_type
    )
    
    doc_id = await add_document(document)
    
    await message.answer(
        f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{order_id}.\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.",
        reply_markup=get_document_keyboard()
    )


@router.message(OrderCreationStates.waiting_for_documents, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def finish_order_creation(message: Message, state: FSMContext):
    user_data = await state.get_data()
    order_id = user_data["order_id"]
    user = await get_user(message.from_user.id)
    
    await message.answer(
        f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        f"–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫–∏ —É–∂–µ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–µ. "
        f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        reply_markup=get_main_keyboard(user.role)
    )
    
    await state.clear()


@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã")
async def find_orders(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user:
        await message.answer(
            "‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if user.role != "carrier":
        await message.answer(
            "‚ùå –ò—Å–∫–∞—Ç—å –∑–∞–∫–∞–∑—ã –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∏.",
            reply_markup=get_main_keyboard(user.role)
        )
        return
    
    await show_available_orders(message, state, 1)


async def show_available_orders(message: Message, state: FSMContext, page: int = 1):
    available_orders = await get_available_orders()
    
    if not available_orders:
        await message.answer(
            "üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
            reply_markup=get_main_keyboard("carrier")
        )
        return
    
    start_idx = (page - 1) * ORDERS_PER_PAGE
    end_idx = start_idx + ORDERS_PER_PAGE
    page_orders = available_orders[start_idx:end_idx]
    
    total_pages = (len(available_orders) + ORDERS_PER_PAGE - 1) // ORDERS_PER_PAGE
    
    for order in page_orders:
        order_text = (
            f"üÜï <b>–ó–∞–∫–∞–∑ #{order.order_id}</b>\n\n"
            f"–¢–∏–ø –≥—Ä—É–∑–∞: {order.cargo_type}\n"
            f"–í–µ—Å: {order.weight} –∫–≥\n"
            f"–û—Ç–∫—É–¥–∞: {order.pickup_address}\n"
            f"–ö—É–¥–∞: {order.delivery_address}\n"
            f"–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {order.pickup_date}"
        )
        
        await message.answer(
            order_text,
            reply_markup=get_accept_order_keyboard(order.order_id)
        )
    
    if total_pages > 1:
        await message.answer(
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}",
            reply_markup=get_orders_navigation_keyboard(page, total_pages)
        )


@router.callback_query(F.data.startswith("orders_page:"))
async def navigate_orders(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":")[1])
    await show_available_orders(callback.message, state, page)
    await callback.answer()


@router.callback_query(F.data.startswith("view_order:"))
async def view_order_details(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    user = await get_user(callback.from_user.id)
    
    order = await get_order(order_id)
    if not order:
        await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    dimensions_text = f"–ì–∞–±–∞—Ä–∏—Ç—ã: {order.dimensions}\n" if order.dimensions else ""
    comment_text = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}\n" if order.comment else ""
    
    order_text = (
        f"üì¶ <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order.order_id}</b>\n\n"
        f"–¢–∏–ø –≥—Ä—É–∑–∞: {order.cargo_type}\n"
        f"–í–µ—Å: {order.weight} –∫–≥\n"
        f"{dimensions_text}"
        f"–û—Ç–∫—É–¥–∞: {order.pickup_address}\n"
        f"–ö—É–¥–∞: {order.delivery_address}\n"
        f"–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {order.pickup_date}\n"
        f"{comment_text}"
        f"–°—Ç–∞—Ç—É—Å: {get_status_emoji(order.status)} {order.status}"
    )
    
    await callback.message.answer(
        order_text,
        reply_markup=get_order_details_keyboard(order.order_id, order.status, user.role)
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("accept_order:"))
async def accept_order(callback: CallbackQuery, state: FSMContext, bot: Bot):
    order_id = int(callback.data.split(":")[1])
    carrier_id = callback.from_user.id
    
    order = await get_order(order_id)
    if not order:
        await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    if order.status != "new":
        await callback.message.answer(
            "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–º."
        )
        await callback.answer()
        return
    
    carrier = await get_user(carrier_id)
    sender = await get_user(order.sender_id)
    
    order.carrier_id = carrier_id
    order.status = "accepted"
    await update_order(order)
    
    await callback.message.answer(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{order.order_id}!\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º:\n"
        f"–ò–º—è: {sender.full_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {sender.phone}\n"
        f"Email: {sender.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    )
    
    try:
        await bot.send_message(
            order.sender_id,
            f"üéâ –í–∞—à –∑–∞–∫–∞–∑ #{order.order_id} –±—ã–ª –ø—Ä–∏–Ω—è—Ç –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–º!\n\n"
            f"–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞:\n"
            f"–ò–º—è: {carrier.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {carrier.phone}\n"
            f"Email: {carrier.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é: {e}")
    
    await callback.answer()


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def show_my_orders(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if not user:
        await message.answer(
            "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    orders = await get_user_orders(user_id, user.role)
    
    if not orders:
        role_text = "—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫" if user.role == "sender" else "–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
        await message.answer(
            f"üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç {role_text}.",
            reply_markup=get_main_keyboard(user.role)
        )
        return
    
    await message.answer(
        f"üìã <b>–í–∞—à–∏ {'–∑–∞—è–≤–∫–∏' if user.role == 'sender' else '–∑–∞–∫–∞–∑—ã'}:</b>"
    )
    
    for order in orders:
        status_emoji = get_status_emoji(order.status)
        status_text = {
            "new": "–ù–æ–≤–∞—è",
            "accepted": "–ü—Ä–∏–Ω—è—Ç–∞",
            "in_progress": "–í –ø—É—Ç–∏",
            "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–∞"
        }.get(order.status, order.status)
        
        order_text = format_order_info(
            order.order_id, 
            order.cargo_type, 
            order.weight, 
            order.pickup_address, 
            order.delivery_address, 
            order.pickup_date,
            order.dimensions,
            f"{status_emoji} {status_text}"
        )
        
        await message.answer(
            order_text,
            reply_markup=get_order_details_keyboard(order.order_id, order.status, user.role)
        )


@router.callback_query(F.data.startswith("mark_delivered:"))
async def mark_delivered(callback: CallbackQuery, state: FSMContext, bot: Bot):
    order_id = int(callback.data.split(":")[1])
    
    order = await get_order(order_id)
    if not order:
        await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    if order.status != "accepted":
        await callback.message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π.")
        await callback.answer()
        return
    
    order.status = "delivered"
    await update_order(order)
    
    await callback.message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ #{order.order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π.\n"
        f"–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."
    )
    
    try:
        await bot.send_message(
            order.sender_id,
            f"üöö –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫ –æ—Ç–º–µ—Ç–∏–ª –∑–∞–∫–∞–∑ #{order.order_id} –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–∞."
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é: {e}")
    
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delivery:"))
async def confirm_delivery(callback: CallbackQuery, state: FSMContext, bot: Bot):
    order_id = int(callback.data.split(":")[1])
    
    order = await get_order(order_id)
    if not order:
        await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    
    if order.status != "delivered":
        await callback.message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ.")
        await callback.answer()
        return
    
    order.status = "completed"
    await update_order(order)
    
    await callback.message.answer(
        f"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ #{order.order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
        f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
    )
    
    try:
        await bot.send_message(
            order.carrier_id,
            f"üéâ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order.order_id}.\n"
            f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫—É: {e}")
    
    await callback.answer()


@router.callback_query(F.data.startswith("view_documents:"))
async def view_documents(callback: CallbackQuery, state: FSMContext, bot: Bot):
    order_id = int(callback.data.split(":")[1])
    
    documents = await get_order_documents(order_id)
    
    if not documents:
        await callback.message.answer(
            f"üìé –ö –∑–∞–∫–∞–∑—É #{order_id} –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
        )
        await callback.answer()
        return
    
    await callback.message.answer(
        f"üìé –î–æ–∫—É–º–µ–Ω—Ç—ã –∫ –∑–∞–∫–∞–∑—É #{order_id}:"
    )
    
    for doc in documents:
        try:
            file_path = doc.file_path
            if doc.file_type == "photo":
                await bot.send_photo(
                    callback.from_user.id,
                    FSInputFile(file_path),
                    caption=f"–î–æ–∫—É–º–µ–Ω—Ç: {doc.file_name}"
                )
            else:
                await bot.send_document(
                    callback.from_user.id,
                    FSInputFile(file_path),
                    caption=f"–î–æ–∫—É–º–µ–Ω—Ç: {doc.file_name}"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await callback.message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc.file_name}"
            )
    
    await callback.answer()
