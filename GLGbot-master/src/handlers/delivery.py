# src/handlers/delivery.py

from aiogram import Router, F
from aiogram.types import CallbackQuery
from src.database.crud import update_order_status
from src.utils.states import DeliveryStates

router = Router()

@router.callback_query(F.data.startswith("stage:"))
async def handle_delivery_stage(callback: CallbackQuery):
    data_parts = callback.data.split(":")
    stage = data_parts[1]
    order_id = int(data_parts[2])

    stage_mapping = {
        "loading": "–ü–æ–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å üèó",
        "on_way": "–ì—Ä—É–∑ –≤ –ø—É—Ç–∏ üöö",
        "waiting": "–û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–≥—Ä—É–∑–∫–∏ ‚è≥",
        "completed": "–ü–µ—Ä–µ–≤–æ–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ"
    }

    status_text = stage_mapping.get(stage)

    if not status_text:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø!", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    await update_order_status(order_id, stage)

    await callback.message.answer(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω:\n{status_text}"
    )

    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
